{
  "hash": "0ec1d2b1e3a31c6400ea0254239d6600",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Rcpp Functions\"\ndescription: \"I describe some of the functions available in Rcpp. If you want to get straight to the material, go to Rcpp Functions.\"\nauthor: \"Isaac Quintanilla\"\ndate: 2021-05-01\ndraft: false\ncategories: \n  - RCPP\nimage: \"JT7.jpg\"\nknitr:\n  opts_chunk: \n    echo: true\n    message: false\n    warning: false\n---\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n\n\n## Journey\n\nWhen I was implementing [RcppArmadillo](http://dirk.eddelbuettel.com/code/rcpp.armadillo.html), there were a couple scenarios where I couldn't find an easy function for a certain result. This is partly due to strictly sticking with the [Armadillo](http://arma.sourceforge.net/) library for all my needs. I built functions to resolve these issues. However, I got to the point where I couldn't rely on the armadillo library to compute the needed value. I needed to compute the value from the inverse cumulative distribution function (iCDF) of a standard normal distribution. The armadillo library is only for linear algebra and scientific computing. It did not have any distribution functions[^1]. Therefore, I needed to find a solution to my problem.\n\n[^1]: I didn't find any in its documentation.\n\nHadley Wickham's [book](https://adv-r.hadley.nz/) describes how to use R functions in cpp code. However, I worried that this may computationally taxing by switching from one language to another. Therefore, I searched for potential solutions to compute the iCDF of a normal distribution. This has brought me to this incredible website: [Rcpp for everyone](https://teuder.github.io/rcpp4everyone_en/).\n\nRcpp for everyone is an excellent website that provides the complete basics of using cpp in R. It is comprehensive that can answer the majority[^2] of your questions when implementing Rcpp. Highly recommend reading it before you implement Rcpp in your code.\n\n[^2]: If not all.\n\nTo obtain the iCDF, I needed to use the [R Math Library](https://teuder.github.io/rcpp4everyone_en/310_Rmath.html)[^3]. This library seems to be loaded when you included in the `Rcpp.h` file. However, you will need to include the line `using namespace R` or `R::` in your cpp code. Below is an example of making `qnorm` executable in R:\n\n[^3]: For more information about the R Math Library, click [here](https://cran.r-project.org/doc/manuals/r-release/R-admin.html#The-standalone-Rmath-library).\n\n``` default\ndouble qnorm_cpp(double p, double mean, double sd, int lower, int log){\n  double val = R::qnorm(p, mean, sd, lower, log);\n  return val;\n}\n```\n\nNow it can be used to obtain the iCDF of a standard normal distribution:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nqnorm_cpp(0.5, 0,1,0,0)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n```\n\n\n:::\n\n```{.r .cell-code}\nqnorm(0.5, 0, 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n```\n\n\n:::\n:::\n\n\n\n\nFor my research, I didn't need create an executable function for R. However, I did worry about compatibility issues with the Armadillo library. Fortunately, the function returns a double value making it easy to work with.\n\nOnce I learned about these different functions, I decided to clean my cpp code with a couple of other functions. For example, I needed to take the factorial of a number. The Armadillo library does not provide a useful function. Therefore, I wrote a function:\n\n``` default\ndouble fact (int x){\n  if (x == 0){\n    return 1;\n  } else if (x == 1){\n    return 1;\n  } else {\n    int ide = x - 1;\n    arma::vec ff = linspace(1, x, x);\n    arma::vec ccpp = cumprod(ff);\n    double post = ccpp[ide];\n    return post;\n  }\n}\n```\n\nAs you can see, it isn't a pretty function. However the Rcpp provides the following function: `factorial`[^4]. Below is the implementation of the function to obtain a double value:\n\n[^4]: Note that this is misspelled in Rcpp for everyone.\n\n``` default\ndouble fact_cpp(double x){\n  NumericVector y = NumericVector::create(x);\n  double val = Rcpp::factorial(y)[0];\n  return val;\n}\n```\n\nBelow is code to benchmark the 2 functions:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbench::mark(\nfact(5),\nfact_cpp(5)\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 6\n  expression       min   median `itr/sec` mem_alloc `gc/sec`\n  <bch:expr>  <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl>\n1 fact(5)        476ns    541ns  1330868.        0B     133.\n2 fact_cpp(5)    543ns    608ns  1364437.        0B       0 \n```\n\n\n:::\n:::\n\n\n\n\nNotice the Rcpp function is slightly faster than my Armadillo implementation.\n\n## Rcpp Functions\n\nFor more accurate information, I highly recommend looking Rcpp for everyone's [Chapter 23](https://teuder.github.io/rcpp4everyone_en/230_R_function.html) and [Chapter 31](https://teuder.github.io/rcpp4everyone_en/310_Rmath.html). I will talk about certain functions I think are important to know.\n\n### Distributions\n\nAs the same with R, the R Math library and Rcpp contain four different functions for each distribution. The letter at the beginning of the distribution indicates the functions capabilities.\n\n| Letter | Functionality                                                 |\n|:-------|:--------------------------------------------------------------|\n| `dXXX` | returns the height of the probability density function        |\n| `pXXX` | returns the cumulative density function value                 |\n| `qXXX` | returns the inverse cumulative density function (percentiles) |\n| `rXXX` | returns a randomly generated number                           |\n\n#### Rcpp\n\nThe Rcpp distribution functions are vectorized to accept and return vector. The tables below provide more details about each function.\n\n*dXXX*\n\n| Argument | Data Type     | Description      |\n|:---------|:--------------|:-----------------|\n| `x`      | NumericVector | random variable  |\n| `par`    | double        | parameters       |\n| `log`    | bool          | return log value |\n\n*pXXX*\n\n| Argument | Data Type     | Description        |\n|:---------|:--------------|:-------------------|\n| `q`      | NumericVector | random variable    |\n| `par`    | double        | parameters         |\n| `lower`  | bool          | return lower value |\n| `log`    | bool          | return log value   |\n\n*qXXX*\n\n| Argument | Data Type     | Description        |\n|:---------|:--------------|:-------------------|\n| `p`      | NumericVector | probability        |\n| `par`    | double        | parameters         |\n| `lower`  | bool          | return lower value |\n| `log`    | bool          | return log value   |\n\n*rXXX*\n\n| Argument | Data Type | Description                |\n|:---------|:----------|:---------------------------|\n| `n`      | int       | number of random variables |\n| `par`    | double    | parameters                 |\n\n#### R\n\nThe R Math library distribution functions return scalar values. The tables below describe the functions in more detail.\n\n*dXXX*\n\n| Argument | Data Type | Description      |\n|:---------|:----------|:-----------------|\n| `x`      | double    | random variable  |\n| `par`    | double    | parameters       |\n| `log`    | int       | return log value |\n\n*pXXX*\n\n| Argument | Data Type | Description        |\n|:---------|:----------|:-------------------|\n| `q`      | double    | random variable    |\n| `par`    | double    | parameters         |\n| `lower`  | int       | return lower value |\n| `log`    | int       | return log value   |\n\n*qXXX*\n\n| Argument | Data Type     | Description        |\n|:---------|:--------------|:-------------------|\n| `p`      | NumericVector | probability        |\n| `par`    | double        | parameters         |\n| `lower`  | int           | return lower value |\n| `log`    | int           | return log value   |\n\n*rXXX*\n\n| Argument | Data Type | Description |\n|:---------|:----------|:------------|\n| `par`    | double    | parameters  |\n\n#### Available Distributions\n\nThe table below describe a select number of distribution functions available in R and Rcpp.\n\n| code  | Distributions            |\n|:------|:-------------------------|\n| unif  | Uniform Distribution     |\n| norm  | Normal Distribution      |\n| chisq | $\\chi²$ Distribution     |\n| t     | t Distribution           |\n| f     | F Distribution           |\n| exp   | Exponential Distribution |\n| binom | Binomial Distribution    |\n| pois  | Poisson Distribution     |\n\n## Next steps ..\n\nI don't know",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}